{
  "address": "0xe73AB11A77054B784732D4CB395C5301056F853a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_payable",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestedRandomNumber",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "endLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyhash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LOTTERY_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e979f506454296300b71f2ef06f4d627c211fe3b313956c6c037c90c7104ac6",
  "receipt": {
    "to": null,
    "from": "0x890E135d8b79d29B4585515c1a21305863cEc6dC",
    "contractAddress": "0xe73AB11A77054B784732D4CB395C5301056F853a",
    "transactionIndex": 9,
    "gasUsed": "1771179",
    "logsBloom": "0x
    "blockHash": "0xcbbd3fb56800c6be2d3c91e7b465e1eb5a2bcd40a31c100635d961bbceb01114",
    "transactionHash": "0x4e979f506454296300b71f2ef06f4d627c211fe3b313956c6c037c90c7104ac6",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10116756,
        "transactionHash": "0x4e979f506454296300b71f2ef06f4d627c211fe3b313956c6c037c90c7104ac6",
        "address": "0xe73AB11A77054B784732D4CB395C5301056F853a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000890e135d8b79d29b4585515c1a21305863cec6dc"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xcbbd3fb56800c6be2d3c91e7b465e1eb5a2bcd40a31c100635d961bbceb01114"
      }
    ],
    "blockNumber": 10116756,
    "cumulativeGasUsed": "2197304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9326BFA02ADD2366b30bacB125260Af641031331",
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "100000000000000000",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311"
  ],
  "numDeployments": 1,
  "solcInputHash": "714c8730a332a22978524a1e6695986d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_payable\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRandomNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"endLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LOTTERY_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Lottery is Ownable, VRFConsumerBase {\\n    address payable[] public players;\\n    uint256 public usdEntranceFee;\\n    AggregatorV3Interface internal ethUsdPriceFeed;\\n    enum LOTTERY_STATE {\\n        OPEN,\\n        CLOSED,\\n        CALCULATING_WINNER\\n    }\\n    LOTTERY_STATE public lotteryState;\\n    uint256 public fee;\\n    bytes32 public keyhash;\\n    address payable public latestWinner;\\n    uint256 public latestRandomNumber;\\n    event RequestedRandomNumber(bytes32 requestId);\\n\\n    constructor(\\n        address priceFeedAddress,\\n        address vrfCoordinatorAddress,\\n        address linkAddress,\\n        uint256 fee_payable,\\n        bytes32 keyHash\\n    ) VRFConsumerBase(vrfCoordinatorAddress, linkAddress) {\\n        usdEntranceFee = 50 * (10**18);\\n        ethUsdPriceFeed = AggregatorV3Interface(priceFeedAddress);\\n        lotteryState = LOTTERY_STATE.CLOSED;\\n        fee = fee_payable;\\n        keyhash = keyHash;\\n    }\\n\\n    // Allows a player to enter the lottery by paying the entrance fee.\\n    function enter() public payable {\\n        require(lotteryState == LOTTERY_STATE.OPEN, \\\"Lottery is not open.\\\");\\n        require(\\n            msg.value >= getEntranceFee(),\\n            \\\"Insufficient funds to enter the lottery\\\"\\n        );\\n        players.push(payable(msg.sender));\\n    }\\n\\n    // Calculates the entrance fee in ETH using a Chainlink oracle.\\n    function getEntranceFee() public view returns (uint256) {\\n        (, int256 price, , , ) = ethUsdPriceFeed.latestRoundData();\\n        uint256 adjustedPrice = uint256(price) * 10**10;\\n        uint256 costToEnter = (usdEntranceFee * 10**18) / adjustedPrice;\\n        return costToEnter;\\n    }\\n\\n    function startLottery() public onlyOwner {\\n        require(\\n            lotteryState == LOTTERY_STATE.CLOSED,\\n            \\\"Lottery is already open.\\\"\\n        );\\n        lotteryState = LOTTERY_STATE.OPEN;\\n    }\\n\\n    // Ends the lottery and gets a random number from the VRF coordinator.\\n    function endLottery() public onlyOwner {\\n        require(lotteryState == LOTTERY_STATE.OPEN, \\\"Lottery is not open.\\\");\\n        lotteryState = LOTTERY_STATE.CALCULATING_WINNER;\\n        bytes32 requestId = requestRandomness(keyhash, fee);\\n        emit RequestedRandomNumber(requestId);\\n    }\\n\\n    // Callback function called by the VRF coordinator when the random number is returned.\\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomness)\\n        internal\\n        override\\n    {\\n        require(\\n            lotteryState == LOTTERY_STATE.CALCULATING_WINNER,\\n            \\\"Lottery is not in the calculating winner state.\\\"\\n        );\\n        require(_randomness > 0, \\\"A random number was not found.\\\");\\n        latestRandomNumber = _randomness;\\n        uint256 winnerIndex = _randomness % players.length;\\n        latestWinner = players[winnerIndex];\\n        latestWinner.transfer(address(this).balance);\\n        players = new address payable[](0);\\n        lotteryState = LOTTERY_STATE.CLOSED;\\n    }\\n}\\n\",\"keccak256\":\"0x54ed7544dae0f8b5130f6e01c6207e76eeff625f1c2786e02e23b05c71d334d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063715018a61161008a578063e70f65ac11610059578063e70f65ac14610288578063e97dcb62146102b3578063f2fde38b146102bd578063f71d96cb146102e6576100e8565b8063715018a6146101f25780638da5cb5b1461020957806394985ddd14610234578063ddca3f431461025d576100e8565b8063160344e2116100c6578063160344e21461015a57806316fe73ec146101715780636939864b1461019c57806369ebe78e146101c7576100e8565b806306ef53e0146100ed57806309bc33a7146101185780631593a8c714610143575b600080fd5b3480156100f957600080fd5b50610102610323565b60405161010f919061173a565b60405180910390f35b34801561012457600080fd5b5061012d610349565b60405161013a9190611937565b60405180910390f35b34801561014f57600080fd5b50610158610435565b005b34801561016657600080fd5b5061016f610610565b005b34801561017d57600080fd5b506101866107a1565b6040516101939190611937565b60405180910390f35b3480156101a857600080fd5b506101b16107a7565b6040516101be919061181c565b60405180910390f35b3480156101d357600080fd5b506101dc6107ba565b6040516101e99190611793565b60405180910390f35b3480156101fe57600080fd5b506102076107c0565b005b34801561021557600080fd5b5061021e610848565b60405161022b919061171f565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906112f3565b610871565b005b34801561026957600080fd5b5061027261090d565b60405161027f9190611937565b60405180910390f35b34801561029457600080fd5b5061029d610913565b6040516102aa9190611937565b60405180910390f35b6102bb610919565b005b3480156102c957600080fd5b506102e460048036038101906102df91906112a1565b610a8a565b005b3480156102f257600080fd5b5061030d6004803603810190610308919061132f565b610b82565b60405161031a919061173a565b60405180910390f35b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190611358565b50505091505060006402540be400826104059190611a06565b9050600081670de0b6b3a76400006003546104209190611a06565b61042a91906119d5565b905080935050505090565b61043d610bc1565b73ffffffffffffffffffffffffffffffffffffffff1661045b610848565b73ffffffffffffffffffffffffffffffffffffffff16146104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a8906118d7565b60405180910390fd5b600060028111156104eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460149054906101000a900460ff166002811115610533577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a906118b7565b60405180910390fd5b6002600460146101000a81548160ff021916908360028111156105bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060006105d4600654600554610bc9565b90507fc620a79baed7e5f06637aa5ab699c2b03ee40b2ae3ba4a91ed1eb0bd00b8ea3b816040516106059190611793565b60405180910390a150565b610618610bc1565b73ffffffffffffffffffffffffffffffffffffffff16610636610848565b73ffffffffffffffffffffffffffffffffffffffff161461068c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610683906118d7565b60405180910390fd5b600160028111156106c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460149054906101000a900460ff16600281111561070e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461074e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610745906118f7565b60405180910390fd5b6000600460146101000a81548160ff0219169083600281111561079a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b60085481565b600460149054906101000a900460ff1681565b60065481565b6107c8610bc1565b73ffffffffffffffffffffffffffffffffffffffff166107e6610848565b73ffffffffffffffffffffffffffffffffffffffff161461083c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610833906118d7565b60405180910390fd5b6108466000610d2a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f690611917565b60405180910390fd5b6109098282610dee565b5050565b60055481565b60035481565b60006002811115610953577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460149054906101000a900460ff16600281111561099b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d2906118b7565b60405180910390fd5b6109e3610349565b341015610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90611857565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610a92610bc1565b73ffffffffffffffffffffffffffffffffffffffff16610ab0610848565b73ffffffffffffffffffffffffffffffffffffffff1614610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd906118d7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d90611837565b60405180910390fd5b610b7f81610d2a565b50565b60028181548110610b9257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001610c3d9291906117ae565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610c6a93929190611755565b602060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc91906112ca565b506000610cdf8460003060016000898152602001908152602001600020546110f8565b9050600180600086815260200190815260200160002054610d00919061197f565b6001600086815260200190815260200160002081905550610d218482611134565b91505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600280811115610e27577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460149054906101000a900460ff166002811115610e6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690611897565b60405180910390fd5b60008111610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990611877565b60405180910390fd5b80600881905550600060028054905082610f0c9190611b50565b905060028181548110610f48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561101b573d6000803e3d6000fd5b50600067ffffffffffffffff81111561105d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561108b5781602001602082028036833780820191505090505b50600290805190602001906110a1929190611167565b506001600460146101000a81548160ff021916908360028111156110ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050565b60008484848460405160200161111194939291906117d7565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016111499291906116f3565b60405160208183030381529060405280519060200120905092915050565b8280548282559060005260206000209081019282156111e0579160200282015b828111156111df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611187565b5b5090506111ed91906111f1565b5090565b5b8082111561120a5760008160009055506001016111f2565b5090565b60008135905061121d81611c33565b92915050565b60008151905061123281611c4a565b92915050565b60008135905061124781611c61565b92915050565b60008151905061125c81611c78565b92915050565b60008135905061127181611c8f565b92915050565b60008151905061128681611c8f565b92915050565b60008151905061129b81611ca6565b92915050565b6000602082840312156112b357600080fd5b60006112c18482850161120e565b91505092915050565b6000602082840312156112dc57600080fd5b60006112ea84828501611223565b91505092915050565b6000806040838503121561130657600080fd5b600061131485828601611238565b925050602061132585828601611262565b9150509250929050565b60006020828403121561134157600080fd5b600061134f84828501611262565b91505092915050565b600080600080600060a0868803121561137057600080fd5b600061137e8882890161128c565b955050602061138f8882890161124d565b94505060406113a088828901611277565b93505060606113b188828901611277565b92505060806113c28882890161128c565b9150509295509295909350565b6113d881611a72565b82525050565b6113e781611a60565b82525050565b6113f681611a90565b82525050565b61140d61140882611a90565b611b3c565b82525050565b600061141e82611952565b611428818561195d565b9350611438818560208601611b09565b61144181611c0e565b840191505092915050565b61145581611af7565b82525050565b600061146860268361196e565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114ce60278361196e565b91507f496e73756666696369656e742066756e647320746f20656e746572207468652060008301527f6c6f7474657279000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611534601e8361196e565b91507f412072616e646f6d206e756d62657220776173206e6f7420666f756e642e00006000830152602082019050919050565b6000611574602f8361196e565b91507f4c6f7474657279206973206e6f7420696e207468652063616c63756c6174696e60008301527f672077696e6e65722073746174652e00000000000000000000000000000000006020830152604082019050919050565b60006115da60148361196e565b91507f4c6f7474657279206973206e6f74206f70656e2e0000000000000000000000006000830152602082019050919050565b600061161a60208361196e565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061165a60188361196e565b91507f4c6f747465727920697320616c7265616479206f70656e2e00000000000000006000830152602082019050919050565b600061169a601f8361196e565b91507f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006000830152602082019050919050565b6116d681611ad7565b82525050565b6116ed6116e882611ad7565b611b46565b82525050565b60006116ff82856113fc565b60208201915061170f82846116dc565b6020820191508190509392505050565b600060208201905061173460008301846113de565b92915050565b600060208201905061174f60008301846113cf565b92915050565b600060608201905061176a60008301866113de565b61177760208301856116cd565b81810360408301526117898184611413565b9050949350505050565b60006020820190506117a860008301846113ed565b92915050565b60006040820190506117c360008301856113ed565b6117d060208301846116cd565b9392505050565b60006080820190506117ec60008301876113ed565b6117f960208301866116cd565b61180660408301856113de565b61181360608301846116cd565b95945050505050565b6000602082019050611831600083018461144c565b92915050565b600060208201905081810360008301526118508161145b565b9050919050565b60006020820190508181036000830152611870816114c1565b9050919050565b6000602082019050818103600083015261189081611527565b9050919050565b600060208201905081810360008301526118b081611567565b9050919050565b600060208201905081810360008301526118d0816115cd565b9050919050565b600060208201905081810360008301526118f08161160d565b9050919050565b600060208201905081810360008301526119108161164d565b9050919050565b600060208201905081810360008301526119308161168d565b9050919050565b600060208201905061194c60008301846116cd565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061198a82611ad7565b915061199583611ad7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119ca576119c9611b81565b5b828201905092915050565b60006119e082611ad7565b91506119eb83611ad7565b9250826119fb576119fa611bb0565b5b828204905092915050565b6000611a1182611ad7565b9150611a1c83611ad7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a5557611a54611b81565b5b828202905092915050565b6000611a6b82611ab7565b9050919050565b6000611a7d82611ab7565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611aa882611c1f565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000611b0282611a9a565b9050919050565b60005b83811015611b27578082015181840152602081019050611b0c565b83811115611b36576000848401525b50505050565b6000819050919050565b6000819050919050565b6000611b5b82611ad7565b9150611b6683611ad7565b925082611b7657611b75611bb0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b60038110611c3057611c2f611bdf565b5b50565b611c3c81611a60565b8114611c4757600080fd5b50565b611c5381611a84565b8114611c5e57600080fd5b50565b611c6a81611a90565b8114611c7557600080fd5b50565b611c8181611aad565b8114611c8c57600080fd5b50565b611c9881611ad7565b8114611ca357600080fd5b50565b611caf81611ae1565b8114611cba57600080fd5b5056fea26469706673582212208edd3e585e248cf6185e5eea06d9ee7f0ec66ba1f6288015cd85ce934428849d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 79,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 450,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 452,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "usdEntranceFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 455,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "ethUsdPriceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)216"
      },
      {
        "astId": 462,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 20,
        "slot": "4",
        "type": "t_enum(LOTTERY_STATE)459"
      },
      {
        "astId": 464,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "keyhash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 468,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "latestWinner",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 470,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "latestRandomNumber",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)216": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_enum(LOTTERY_STATE)459": {
        "encoding": "inplace",
        "label": "enum Lottery.LOTTERY_STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}