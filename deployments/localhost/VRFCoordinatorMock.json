{
  "address": "0x5FeaeBfB4439F3516c74939A9D04e95AFE82C4ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "linkAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumerContract",
          "type": "address"
        }
      ],
      "name": "callBackWithRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29c63d1bab6ad8274e91ce0a3afaa76b551d336b832ab9617eaaa5b794fdb934",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FeaeBfB4439F3516c74939A9D04e95AFE82C4ae",
    "transactionIndex": 0,
    "gasUsed": "523256",
    "logsBloom": "0x
    "blockHash": "0x3aaaef191e5aeb868aa9c11bfa7f7ba95bd8dec731d67a8e043fb7e268325cba",
    "transactionHash": "0x29c63d1bab6ad8274e91ce0a3afaa76b551d336b832ab9617eaaa5b794fdb934",
    "logs": [],
    "blockNumber": 14184028,
    "cumulativeGasUsed": "523256",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB0f05d25e41FbC2b52013099ED9616f1206Ae21B"
  ],
  "numDeployments": 1,
  "solcInputHash": "102bc652badd39603ff241d7c5a84308",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumerContract\",\"type\":\"address\"}],\"name\":\"callBackWithRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/VRFCoordinatorMock.sol\":\"VRFCoordinatorMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"contracts/mocks/VRFCoordinatorMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\ncontract VRFCoordinatorMock {\\n    LinkTokenInterface public LINK;\\n\\n    event RandomnessRequest(\\n        address indexed sender,\\n        bytes32 indexed keyHash,\\n        uint256 indexed seed\\n    );\\n\\n    constructor(address linkAddress) public {\\n        LINK = LinkTokenInterface(linkAddress);\\n    }\\n\\n    function onTokenTransfer(\\n        address sender,\\n        uint256 fee,\\n        bytes memory _data\\n    ) public onlyLINK {\\n        (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\\n        emit RandomnessRequest(sender, keyHash, seed);\\n    }\\n\\n    function callBackWithRandomness(\\n        bytes32 requestId,\\n        uint256 randomness,\\n        address consumerContract\\n    ) public {\\n        VRFConsumerBase v;\\n        bytes memory resp = abi.encodeWithSelector(\\n            v.rawFulfillRandomness.selector,\\n            requestId,\\n            randomness\\n        );\\n        uint256 b = 206000;\\n        require(gasleft() >= b, \\\"not enough gas for consumer\\\");\\n        (bool success, ) = consumerContract.call(resp);\\n    }\\n\\n    modifier onlyLINK() {\\n        require(msg.sender == address(LINK), \\\"Must use LINK token\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1b4bca255ee8af78a72060d2ab059e2fb5d3ceee44f5f9eafbd1ef6cab3c8213\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161091b38038061091b8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b61080d8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105d4565b60405180910390f35b61007e600480360381019061007991906103c4565b6100c0565b005b61009a60048036038101906100959190610467565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061060f565b60405180910390fd5b60008082806020019051810190610165919061042b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d39291906105ab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105ef565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610594565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610660565b61062f565b90508281526020810184848401111561031e57600080fd5b610329848285610721565b509392505050565b60008135905061034081610792565b92915050565b600081359050610355816107a9565b92915050565b60008151905061036a816107a9565b92915050565b600082601f83011261038157600080fd5b81356103918482602086016102f3565b91505092915050565b6000813590506103a9816107c0565b92915050565b6000815190506103be816107c0565b92915050565b6000806000606084860312156103d957600080fd5b60006103e786828701610331565b93505060206103f88682870161039a565b925050604084013567ffffffffffffffff81111561041557600080fd5b61042186828701610370565b9150509250925092565b6000806040838503121561043e57600080fd5b600061044c8582860161035b565b925050602061045d858286016103af565b9150509250929050565b60008060006060848603121561047c57600080fd5b600061048a86828701610346565b935050602061049b8682870161039a565b92505060406104ac86828701610331565b9150509250925092565b6104bf816106c9565b82525050565b60006104d082610690565b6104da818561069b565b93506104ea818560208601610730565b80840191505092915050565b6104ff816106fd565b82525050565b6000610512601b836106a6565b91507f6e6f7420656e6f7567682067617320666f7220636f6e73756d657200000000006000830152602082019050919050565b60006105526013836106a6565b91507f4d75737420757365204c494e4b20746f6b656e000000000000000000000000006000830152602082019050919050565b61058e816106f3565b82525050565b60006105a082846104c5565b915081905092915050565b60006040820190506105c060008301856104b6565b6105cd6020830184610585565b9392505050565b60006020820190506105e960008301846104f6565b92915050565b6000602082019050818103600083015261060881610505565b9050919050565b6000602082019050818103600083015261062881610545565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561065657610655610763565b5b8060405250919050565b600067ffffffffffffffff82111561067b5761067a610763565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006106c2826106d3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107088261070f565b9050919050565b600061071a826106d3565b9050919050565b82818337600083830152505050565b60005b8381101561074e578082015181840152602081019050610733565b8381111561075d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61079b816106b7565b81146107a657600080fd5b50565b6107b2816106c9565b81146107bd57600080fd5b50565b6107c9816106f3565b81146107d457600080fd5b5056fea26469706673582212205cb6173dc00bbf3042e7254be9717bc433399052975d40326029bbbd8e60721964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105d4565b60405180910390f35b61007e600480360381019061007991906103c4565b6100c0565b005b61009a60048036038101906100959190610467565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061060f565b60405180910390fd5b60008082806020019051810190610165919061042b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d39291906105ab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105ef565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610594565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610660565b61062f565b90508281526020810184848401111561031e57600080fd5b610329848285610721565b509392505050565b60008135905061034081610792565b92915050565b600081359050610355816107a9565b92915050565b60008151905061036a816107a9565b92915050565b600082601f83011261038157600080fd5b81356103918482602086016102f3565b91505092915050565b6000813590506103a9816107c0565b92915050565b6000815190506103be816107c0565b92915050565b6000806000606084860312156103d957600080fd5b60006103e786828701610331565b93505060206103f88682870161039a565b925050604084013567ffffffffffffffff81111561041557600080fd5b61042186828701610370565b9150509250925092565b6000806040838503121561043e57600080fd5b600061044c8582860161035b565b925050602061045d858286016103af565b9150509250929050565b60008060006060848603121561047c57600080fd5b600061048a86828701610346565b935050602061049b8682870161039a565b92505060406104ac86828701610331565b9150509250925092565b6104bf816106c9565b82525050565b60006104d082610690565b6104da818561069b565b93506104ea818560208601610730565b80840191505092915050565b6104ff816106fd565b82525050565b6000610512601b836106a6565b91507f6e6f7420656e6f7567682067617320666f7220636f6e73756d657200000000006000830152602082019050919050565b60006105526013836106a6565b91507f4d75737420757365204c494e4b20746f6b656e000000000000000000000000006000830152602082019050919050565b61058e816106f3565b82525050565b60006105a082846104c5565b915081905092915050565b60006040820190506105c060008301856104b6565b6105cd6020830184610585565b9392505050565b60006020820190506105e960008301846104f6565b92915050565b6000602082019050818103600083015261060881610505565b9050919050565b6000602082019050818103600083015261062881610545565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561065657610655610763565b5b8060405250919050565b600067ffffffffffffffff82111561067b5761067a610763565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006106c2826106d3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107088261070f565b9050919050565b600061071a826106d3565b9050919050565b82818337600083830152505050565b60005b8381101561074e578082015181840152602081019050610733565b8381111561075d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61079b816106b7565b81146107a657600080fd5b50565b6107b2816106c9565b81146107bd57600080fd5b50565b6107c9816106f3565b81146107d457600080fd5b5056fea26469706673582212205cb6173dc00bbf3042e7254be9717bc433399052975d40326029bbbd8e60721964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 272,
        "contract": "contracts/mocks/VRFCoordinatorMock.sol:VRFCoordinatorMock",
        "label": "LINK",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(LinkTokenInterface)265"
      }
    ],
    "types": {
      "t_contract(LinkTokenInterface)265": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      }
    }
  }
}